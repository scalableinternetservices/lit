# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.


schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type User {
  id: Int!
  userType: UserType!
  name: String!
  email: String
  # worksPublished: [Work!]!
}

enum UserType { ADMIN, USER }

type Work {
  id: Int!
  userID: Int!
  title: String!
  summary: String!
  dateCreated: String!
  dateModified: String!
  chapterCurrMaxID: Int!
}

# maxchapter id
# chapter table
# primary key  work id chapter id deleted

# 2             2    1
# 3             1    2
# 4            1     3
# 5           1      4

# select * from chapter where workID = 1;

# 3             1    2 chapter (/1/2)
# 4            1     3 ch1 (/1/3)
# 5           1      4 ch2 (/1/4)

# work id     chapterID array
# 1         | 1
# 2         | 2 3
# ...


type Chapter {
  id: Int!
  workID: Int!
  chapterID: Int!
  userID: Int!
  title: String!
  text: String!
  dateCreated: String!
  dateModified: String!
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User

  users: [User!]!
  # works: [Work!]!

  work(workID: Int!): Work
  user(userID: Int!): User
  chapter(wrkID: Int!, chID: Int!): Chapter
  # work(workTitle: String!): Work
  # user(userName: String!): User
  # chapter(workTitle: String!, chapterTitle: Int!): Chapter
  surveys: [Survey!]!
  survey (surveyId: Int!): Survey
}

type Mutation {
  # addWork(title: String!, user: User!): Work
  # Records an answer to a survey question presented in class.
  answerSurvey (input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  nextSurveyQuestion (surveyId: Int!): Survey
}


########################################################
#####    vvv   ROTHFEL'S PROJECT MATERIAL  vvv     #####
########################################################


type Subscription {
  surveyUpdates (surveyId: Int!): Survey
}

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

input SurveyInput {
  questionId: Int!
  answer: String!
}