# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.

# NOTE: always run "npm run gen" after modifying this file

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type User {
  id: Int!
  userType: UserType!
  name: String!
  email: String
  works: [Work!]
  bookmarks: [Bookmark!]
  # NOTE:
    # exclamation point inside bracket means all elements within array are not null
    # exclamation point outside bracket means array cannot be null
}


# GET work/:workid
# work/1
# GET chapter/:workid/:chapterid
# work
# 1
# 3
# 4

# userA/1
#      /5
# userB/3
#      /4

enum UserType { ADMIN, USER }

# NOTE: we don't need a workid for this one bc it is fine if it increments fast

type Work {
  id: Int!
  #userID: Int!  # NOTE: no longer needed this once we added the many to one relations in the work.ts file because having a User attached to it already creates a userid field
  title: String!
  summary: String!
  chapters: [Chapter!]!
  user: User!
  bookmarks: [Bookmark!]
}

# NOTE: we don't have to have a chapterid but it is much clearer to have one so that it doesn't increment too quickly in relation to the work
# maxchapter id
# chapter table
# primary key  work id chapter id deleted

# work    id
#  1       /1
#2        /3       /4


# 2             2    1
# 3             1    2
# 4            1     3
# 5           1      4

# select * from chapter where workID = 1;

# 3             1    2 chapter (/1/2)
# 4            1     3 ch1 (/1/3)
# 5           1      4 ch2 (/1/4)

# work id     chapterID array
# 1         | 1
# 2         | 2 3
# ...


input WorkInput {
  workID: Int!
  summary: String!
}

type Chapter {
  id: Int!
  # workID: Int! # NOTE: no longer needed this once we added the many to one relations in the chapter.ts file because having a work attached to it already creates a workid field
  title: String!
  text: String!
  work: Work!
}

type Bookmark {
  id: Int!
  user: User!
  work: Work!
}

input ChapterInput {
  chapterID: Int!
  title: String!
  text: String!
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User

  surveys: [Survey!]!
  survey (surveyId: Int!): Survey

  user(userID: Int!): User
  users: [User!]!
  work(workID: Int!): Work
  chapter(chID: Int!): Chapter
  targetWorks(targetWork: String!): [Work!]
  works: [Work!]
  bookmark (bookmarkID: Int!): Bookmark
  bookmarks: [Bookmark!]

}

type Mutation {
  # Records an answer to a survey question presented in class.
  answerSurvey (input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  nextSurveyQuestion (surveyId: Int!): Survey

  # Edit work summary (works/:workid)
  updateSummary (input: WorkInput!): Boolean!
  # Edit chapter /works/:workid/:chapterid
  updateChapter (input: ChapterInput!): Boolean!
  # Returns new work ID
  createWork(workUserID: Int!, workTitle: String!, workSummary: String!): Int

  # Returns new chapter ID
  addChapter(workID: Int!, chapterTitle: String!, chapterText: String!): Int

  # Returns bookmark id
  createBookmark (userID: Int!, workID: Int!): Int!

  # Delete the work with workID
  deleteWork(workID: Int!): Boolean!

  # Delete the chapter with chapterID
  deleteChapter(chID: Int!): Boolean!

  # Delete bookmark with userID and workID
  deleteBookmark (bookmarkID: Int!): Boolean!
}


########################################################
#####    vvv   ROTHFEL'S PROJECT MATERIAL  vvv     #####
########################################################


type Subscription {
  surveyUpdates (surveyId: Int!): Survey
}

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

input SurveyInput {
  questionId: Int!
  answer: String!
}